function solution(queue1, queue2) {
    let sum1 = queue1.reduce((a, b) => a + b, 0);
    let sum2 = queue2.reduce((a, b) => a + b, 0);
    let target = (sum1 + sum2) / 2;

    if ((sum1 + sum2) % 2 !== 0) return -1;

    let combined = queue1.concat(queue2);
    let len = combined.length;
    let currentSum = sum1;
    let i = 0, j = queue1.length;
    let moves = 0;
    let maxMoves = len * 2;

    while (i < len && j < len) {
        if (currentSum === target) return moves;
        if (currentSum > target) {
            currentSum -= combined[i];
            i++;
        } else {
            currentSum += combined[j];
            j++;
        }
        moves++;
        if (moves > maxMoves) return -1;
    }

    return -1;
}

// Example Usage
console.log(solution([3, 2, 7, 2], [4, 6, 5, 1])); // Output: 2
console.log(solution([1, 2, 1, 2], [1, 10, 1, 2])); // Output: 7
console.log(solution([1, 1], [1, 5])); // Output: -1

function solution(maps) {
    const rows = maps.length;
    const cols = maps[0].length;
    const visited = Array.from({ length: rows }, () => Array(cols).fill(false));
    const directions = [[1, 0], [-1, 0], [0, 1], [0, -1]];
    const islandSums = [];

    function isInBounds(x, y) {
        return x >= 0 && x < rows && y >= 0 && y < cols;
    }

    function dfs(x, y) {
        const stack = [[x, y]];
        let sum = 0;

        while (stack.length > 0) {
            const [cx, cy] = stack.pop();
            if (!isInBounds(cx, cy) || maps[cx][cy] === 'X' || visited[cx][cy]) {
                continue;
            }

            visited[cx][cy] = true;
            sum += parseInt(maps[cx][cy]);

            for (const [dx, dy] of directions) {
                const nx = cx + dx;
                const ny = cy + dy;
                if (isInBounds(nx, ny) && maps[nx][ny] !== 'X' && !visited[nx][ny]) {
                    stack.push([nx, ny]);
                }
            }
        }
        return sum;
    }

    for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
            if (maps[i][j] !== 'X' && !visited[i][j]) {
                const islandSum = dfs(i, j);
                islandSums.push(islandSum);
            }
        }
    }

    if (islandSums.length === 0) {
        return [-1];
    }

    islandSums.sort((a, b) => a - b);
    return islandSums;
}

// Example usage
console.log(solution(["X591X", "X1X5X", "X231X", "1XXX1"])); // [1, 1, 27]
console.log(solution(["XXX", "XXX", "XXX"])); // [-1]

function solution(rows, columns, queries) {
    // Step 1: Initialize the matrix
    const matrix = [];
    let num = 1;
    for (let i = 0; i < rows; i++) {
        const row = [];
        for (let j = 0; j < columns; j++) {
            row.push(num++);
        }
        matrix.push(row);
    }

    // Helper function to rotate the border and find the minimum value
    function rotateBorderAndFindMin(x1, y1, x2, y2) {
        // Adjust to 0-based indexing
        x1--; y1--; x2--; y2--;

        // Get the elements on the border
        let temp = [];
        for (let i = y1; i < y2; i++) temp.push(matrix[x1][i]); // Top row
        for (let i = x1; i < x2; i++) temp.push(matrix[i][y2]); // Right column
        for (let i = y2; i > y1; i--) temp.push(matrix[x2][i]); // Bottom row
        for (let i = x2; i > x1; i--) temp.push(matrix[i][y1]); // Left column

        // Rotate elements clockwise by moving them one step right in temp
        temp.unshift(temp.pop());

        // Find the minimum value in the rotated border
        const minVal = Math.min(...temp);

        // Place rotated elements back into the matrix
        let idx = 0;
        for (let i = y1; i < y2; i++) matrix[x1][i] = temp[idx++]; // Top row
        for (let i = x1; i < x2; i++) matrix[i][y2] = temp[idx++]; // Right column
        for (let i = y2; i > y1; i--) matrix[x2][i] = temp[idx++]; // Bottom row
        for (let i = x2; i > x1; i--) matrix[i][y1] = temp[idx++]; // Left column

        return minVal;
    }

    const result = [];
    for (const [x1, y1, x2, y2] of queries) {
        const minVal = rotateBorderAndFindMin(x1, y1, x2, y2);
        result.push(minVal);
    }

    return result;
}

// Example usage
console.log(solution(6, 6, [[2, 2, 5, 4], [3, 3, 6, 6], [5, 1, 6, 3]])); // [8, 10, 25]
console.log(solution(3, 3, [[1, 1, 2, 2], [1, 2, 2, 3], [2, 1, 3, 2], [2, 2, 3, 3]])); // [1, 1, 5, 3]
console.log(solution(100, 97, [[1, 1, 100, 97]])); // [1]
