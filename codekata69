function solution(queue1, queue2) {
    let sum1 = queue1.reduce((a, b) => a + b, 0);
    let sum2 = queue2.reduce((a, b) => a + b, 0);
    let target = (sum1 + sum2) / 2;

    if ((sum1 + sum2) % 2 !== 0) return -1;

    let combined = queue1.concat(queue2);
    let len = combined.length;
    let currentSum = sum1;
    let i = 0, j = queue1.length;
    let moves = 0;
    let maxMoves = len * 2;

    while (i < len && j < len) {
        if (currentSum === target) return moves;
        if (currentSum > target) {
            currentSum -= combined[i];
            i++;
        } else {
            currentSum += combined[j];
            j++;
        }
        moves++;
        if (moves > maxMoves) return -1;
    }

    return -1;
}

// Example Usage
console.log(solution([3, 2, 7, 2], [4, 6, 5, 1])); // Output: 2
console.log(solution([1, 2, 1, 2], [1, 10, 1, 2])); // Output: 7
console.log(solution([1, 1], [1, 5])); // Output: -1
