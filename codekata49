function solution(n) {
    const MOD = 1234567;
    if (n === 1) return 1;
    if (n === 2) return 2;
    
    let dp = new Array(n + 1).fill(0);
    dp[0] = 1; // There is 1 way to stay at the starting point
    dp[1] = 1; // There is 1 way to reach the first square
    
    for (let i = 2; i <= n; i++) {
        dp[i] = (dp[i-1] + dp[i-2]) % MOD;
    }
    
    return dp[n];
}

function solution(k, tangerine) {
    // Step 1: Count the frequencies of each size
    const frequencyMap = {};
    for (let size of tangerine) {
        if (frequencyMap[size]) {
            frequencyMap[size]++;
        } else {
            frequencyMap[size] = 1;
        }
    }
    
    // Step 2: Convert frequency map to an array of [size, count] and sort by count in descending order
    const sortedFrequencies = Object.entries(frequencyMap).sort((a, b) => b[1] - a[1]);
    
    // Step 3: Select sizes until we reach or exceed k tangerines
    let count = 0;
    let numTypes = 0;
    for (let [size, freq] of sortedFrequencies) {
        count += freq;
        numTypes++;
        if (count >= k) {
            break;
        }
    }
    
    return numTypes;
}

function solution(s) {
    const isValid = (str) => {
        const stack = [];
        const map = {
            '(': ')',
            '[': ']',
            '{': '}'
        };

        for (let char of str) {
            if (map[char]) {
                stack.push(char);
            } else {
                if (stack.length === 0) return false;
                const last = stack.pop();
                if (map[last] !== char) return false;
            }
        }

        return stack.length === 0;
    };

    let count = 0;
    const n = s.length;
    
    for (let i = 0; i < n; i++) {
        const rotated = s.slice(i) + s.slice(0, i);
        if (isValid(rotated)) count++;
    }
    
    return count;
}
