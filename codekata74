function solution(storey) {
    let answer = 0;

    while (storey > 0) {
        const digit = storey % 10;
        
        if (digit > 5 || (digit === 5 && Math.floor(storey / 10) % 10 >= 5)) {
            answer += (10 - digit);
            storey = Math.floor(storey / 10) + 1;  // rounding up
        } else {
            answer += digit;
            storey = Math.floor(storey / 10);
        }
    }

    return answer;
}

function solution(places) {
    function isValidPlace(place) {
        const directions = [
            [0, 1], [1, 0], [-1, 0], [0, -1],
            [0, 2], [2, 0], [-2, 0], [0, -2],
            [1, 1], [1, -1], [-1, 1], [-1, -1]
        ];
        
        for (let r = 0; r < 5; r++) {
            for (let c = 0; c < 5; c++) {
                if (place[r][c] === 'P') {
                    for (const [dr, dc] of directions) {
                        const nr = r + dr;
                        const nc = c + dc;

                        if (nr >= 0 && nr < 5 && nc >= 0 && nc < 5) {
                            if (Math.abs(dr) + Math.abs(dc) === 1 && place[nr][nc] === 'P') {
                                return false;
                            }
                            if (Math.abs(dr) + Math.abs(dc) === 2 && place[nr][nc] === 'P') {
                                if (dr === 0 || dc === 0) {
                                    const midR = r + dr / 2;
                                    const midC = c + dc / 2;
                                    if (place[midR][midC] !== 'X') {
                                        return false;
                                    }
                                } else {
                                    if (place[r][nc] !== 'X' || place[nr][c] !== 'X') {
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }
    
    const answer = [];
    for (const place of places) {
        answer.push(isValidPlace(place) ? 1 : 0);
    }
    
    return answer;
}

function gcd(a, b) {
    while (b !== 0) {
        let temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

function gcdArray(arr) {
    return arr.reduce((acc, curr) => gcd(acc, curr));
}

function solution(arrayA, arrayB) {
    let gcdA = gcdArray(arrayA);
    let gcdB = gcdArray(arrayB);

    // Check if gcdA divides any element in arrayB
    let validA = arrayB.every(num => num % gcdA !== 0) ? gcdA : 0;

    // Check if gcdB divides any element in arrayA
    let validB = arrayA.every(num => num % gcdB !== 0) ? gcdB : 0;

    // Return the maximum of the valid candidates
    return Math.max(validA, validB);
}

// Example usage
console.log(solution([10, 17], [5, 20])); // Output: 0
console.log(solution([10, 20], [5, 17])); // Output: 10
console.log(solution([14, 35, 119], [18, 30, 102])); // Output: 7
