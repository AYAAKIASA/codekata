function solution(book_time) {
    let events = [];

    // Convert HH:MM to minutes since start of the day
    function timeToMinutes(t) {
        let [h, m] = t.split(':').map(Number);
        return h * 60 + m;
    }

    // Prepare start and end times with cleaning duration
    book_time.forEach(([start, end]) => {
        let startMinutes = timeToMinutes(start);
        let endMinutes = timeToMinutes(end) + 10;  // add 10 minutes for cleaning
        events.push([startMinutes, 'start']);
        events.push([endMinutes, 'end']);
    });

    // Sort events, prioritizing 'end' before 'start' if times are equal
    events.sort((a, b) => a[0] - b[0] || (a[1] === 'start' ? 1 : -1));

    let roomsInUse = 0;
    let maxRoomsNeeded = 0;
    let endTimes = [];

    for (let [time, typeOfEvent] of events) {
        if (typeOfEvent === 'start') {
            // Free up rooms that are available before the current start time
            while (endTimes.length && endTimes[0] <= time) {
                endTimes.shift();
                roomsInUse--;
            }
            // Increment room usage for the current reservation
            roomsInUse++;
            maxRoomsNeeded = Math.max(maxRoomsNeeded, roomsInUse);
        } else {
            // End event: add end time to the list and sort
            endTimes.push(time);
            endTimes.sort((a, b) => a - b);
        }
    }

    return maxRoomsNeeded;
}

// Test cases
console.log(solution([["15:00", "17:00"], ["16:40", "18:20"], ["14:20", "15:20"], ["14:10", "19:20"], ["18:20", "21:20"]]));  // Output: 3
console.log(solution([["09:10", "10:10"], ["10:20", "12:20"]]));  // Output: 1
console.log(solution([["10:20", "12:30"], ["10:20", "12:30"], ["10:20", "12:30"]]));  // Output: 3
