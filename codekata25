function solution(strings, n) {
    // Sorting the strings using a custom comparator function
    strings.sort((a, b) => {
        // Compare nth characters first
        if (a[n] < b[n]) return -1;
        if (a[n] > b[n]) return 1;
        // If nth characters are the same, compare the whole strings
        if (a < b) return -1;
        if (a > b) return 1;
        return 0;
    });
    return strings;
}

// Example usage:
const strings1 = ["sun", "bed", "car"];
const n1 = 1;
console.log(solution(strings1, n1));  // Output: ["car", "bed", "sun"]

const strings2 = ["abce", "abcd", "cdx"];
const n2 = 2;
console.log(solution(strings2, n2));  // Output: ["abcd", "abce", "cdx"]

function solution(array, commands) {
    var answer = [];

    commands.forEach(command => {
        const [i, j, k] = command;
        // Extract subarray (1-based indices to 0-based indices)
        const subarray = array.slice(i - 1, j);
        // Sort the subarray
        subarray.sort((a, b) => a - b);
        // Find the k-th element
        answer.push(subarray[k - 1]);
    });

    return answer;
}

// Example usage:
const array = [1, 5, 2, 6, 3, 7, 4];
const commands = [[2, 5, 3], [4, 4, 1], [1, 7, 3]];
console.log(solution(array, commands));  // Output: [5, 6, 3]

function solution(numbers) {
    let sums = new Set();
    
    // Iterate over all pairs (i, j) where i < j
    for (let i = 0; i < numbers.length - 1; i++) {
        for (let j = i + 1; j < numbers.length; j++) {
            let sum = numbers[i] + numbers[j];
            sums.add(sum);
        }
    }
    
    // Convert the set to an array and sort it
    return Array.from(sums).sort((a, b) => a - b);
}

// Examples to test the function
console.log(solution([2, 1, 3, 4, 1])); // [2, 3, 4, 5, 6, 7]
console.log(solution([5, 0, 2, 7]));    // [2, 5, 7, 9, 12]
