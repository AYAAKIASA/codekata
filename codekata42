function solution(park, routes) {
    const H = park.length;
    const W = park[0].length;
    
    // Find the starting point 'S'
    let startX, startY;
    for (let i = 0; i < H; i++) {
        for (let j = 0; j < W; j++) {
            if (park[i][j] === 'S') {
                startX = i;
                startY = j;
                break;
            }
        }
        if (startX !== undefined) break;
    }
    
    // Direction mapping
    const directions = {
        'N': [-1, 0],
        'S': [1, 0],
        'E': [0, 1],
        'W': [0, -1]
    };
    
    // Process each route
    let x = startX;
    let y = startY;
    
    for (const route of routes) {
        const [dir, distStr] = route.split(' ');
        const dist = parseInt(distStr);
        const [dx, dy] = directions[dir];
        
        let validMove = true;
        let newX = x;
        let newY = y;
        
        for (let step = 1; step <= dist; step++) {
            newX += dx;
            newY += dy;
            
            if (newX < 0 || newX >= H || newY < 0 || newY >= W || park[newX][newY] === 'X') {
                validMove = false;
                break;
            }
        }
        
        if (validMove) {
            x = newX;
            y = newY;
        }
    }
    
    return [x, y];
}

// Test cases
console.log(solution(["SOO","OOO","OOO"], ["E 2","S 2","W 1"])); // [2, 1]
console.log(solution(["SOO","OXX","OOO"], ["E 2","S 2","W 1"])); // [0, 1]
console.log(solution(["OSO","OOO","OXO","OOO"], ["E 2","S 3","W 1"])); // [0, 0]
