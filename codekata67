function solution(n) {
    // Initialize the triangular matrix
    const triangle = Array.from({ length: n }, (_, i) => Array(i + 1).fill(0));
    
    // Define movement directions: down, right, and up
    const directions = [[1, 0], [0, 1], [-1, -1]];
    let current_direction = 0;
    
    // Starting point
    let x = 0, y = 0;
    let current_value = 1;
    
    while (current_value <= (n * (n + 1)) / 2) {
        // Place the current value
        triangle[x][y] = current_value;
        current_value++;
        
        // Calculate the next position
        let next_x = x + directions[current_direction][0];
        let next_y = y + directions[current_direction][1];
        
        // Check if the next position is valid
        if (0 <= next_x && next_x < n && 0 <= next_y && next_y <= next_x && triangle[next_x][next_y] === 0) {
            x = next_x;
            y = next_y;
        } else {
            // Change direction
            current_direction = (current_direction + 1) % 3;
            x = x + directions[current_direction][0];
            y = y + directions[current_direction][1];
        }
    }
    
    // Flatten the triangle into a result array
    const result = [];
    for (let row of triangle) {
        result.push(...row);
    }
    
    return result;
}

// Example usage
console.log(solution(4));  // Output: [1, 2, 9, 3, 10, 8, 4, 5, 6, 7]
console.log(solution(5));  // Output: [1, 2, 12, 3, 13, 11, 4, 14, 15, 10, 5, 6, 7, 8, 9]
console.log(solution(6));  // Output: [1, 2, 15, 3, 16, 14, 4, 17, 21, 13, 5, 18, 19, 20, 12, 6, 7, 8, 9, 10, 11]
