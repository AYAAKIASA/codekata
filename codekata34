function solution(lottos, win_nums) {
    // Function to determine rank based on the number of matches
    function getRank(matches) {
        switch(matches) {
            case 6: return 1;
            case 5: return 2;
            case 4: return 3;
            case 3: return 4;
            case 2: return 5;
            default: return 6;
        }
    }

    // Count actual matches and number of zeros in lottos
    let actualMatches = 0;
    let zeroCount = 0;

    for (let num of lottos) {
        if (num === 0) {
            zeroCount++;
        } else if (win_nums.includes(num)) {
            actualMatches++;
        }
    }

    // Calculate highest and lowest possible matches
    const highestPossibleMatches = actualMatches + zeroCount;
    const lowestPossibleMatches = actualMatches;

    // Determine ranks
    const highestRank = getRank(highestPossibleMatches);
    const lowestRank = getRank(lowestPossibleMatches);

    return [highestRank, lowestRank];
}

// Example usage:
console.log(solution([44, 1, 0, 0, 31, 25], [31, 10, 45, 1, 6, 19])); // Output: [3, 5]
console.log(solution([0, 0, 0, 0, 0, 0], [38, 19, 20, 40, 15, 25])); // Output: [1, 6]
console.log(solution([45, 4, 35, 20, 3, 9], [20, 9, 3, 45, 4, 35])); // Output: [1, 1]

function solution(babbling) {
    // Define the valid patterns
    const validPatterns = ["aya", "ye", "woo", "ma"];
    
    // Create a regex pattern to match any valid pattern without consecutive repeats
    const regex = new RegExp(`^(aya|ye|woo|ma)+$`);
    
    let count = 0;
    
    // Function to check for consecutive repeating patterns
    function hasConsecutiveRepeats(word) {
        for (let pattern of validPatterns) {
            if (word.includes(pattern + pattern)) {
                return true;
            }
        }
        return false;
    }
    
    // Iterate over each word and check if it is pronounceable
    for (let word of babbling) {
        if (regex.test(word) && !hasConsecutiveRepeats(word)) {
            count++;
        }
    }
    
    return count;
}

// Example usage
console.log(solution(["aya", "yee", "u", "maa"])); // Output: 1
console.log(solution(["ayaye", "uuu", "yeye", "yemawoo", "ayaayaa"])); // Output: 2

function solution(X, Y) {
    // Frequency arrays for digits 0-9
    let freqX = Array(10).fill(0);
    let freqY = Array(10).fill(0);

    // Count digit frequencies for X
    for (let char of X) {
        freqX[char]++;
    }

    // Count digit frequencies for Y
    for (let char of Y) {
        freqY[char]++;
    }

    // Result array to store common digits
    let result = [];

    // Find common digits
    for (let i = 0; i < 10; i++) {
        let commonCount = Math.min(freqX[i], freqY[i]);
        for (let j = 0; j < commonCount; j++) {
            result.push(i);
        }
    }

    // If no common digits, return "-1"
    if (result.length === 0) {
        return "-1";
    }

    // Sort in descending order to get the largest number
    result.sort((a, b) => b - a);

    // Convert array to string
    let resultStr = result.join('');

    // If the result is all zeros, return "0"
    if (resultStr[0] === '0') {
        return "0";
    }

    return resultStr;
}

// Example usage:
console.log(solution("100", "2345")); // Output: "-1"
console.log(solution("100", "203045")); // Output: "0"
console.log(solution("100", "123450")); // Output: "10"
console.log(solution("12321", "42531")); // Output: "321"
console.log(solution("5525", "1255")); // Output: "552"
