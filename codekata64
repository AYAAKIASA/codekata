function solution(numbers) {
    // Convert each number to a string for comparison
    let numStrs = numbers.map(String);

    // Sort the numbers based on the custom comparator
    numStrs.sort((a, b) => (b + a).localeCompare(a + b));

    // If the highest number is '0', return '0' to avoid leading zeroes
    if (numStrs[0] === '0') {
        return '0';
    }

    // Join the sorted strings to form the largest number
    return numStrs.join('');
}

function solution(numbers) {
    let digitArr = numbers.split('');
    let primeSet = new Set();

    function getPermutations(arr, prefix) {
        if (prefix.length > 0) {
            let num = parseInt(prefix);
            if (isPrime(num)) {
                primeSet.add(num);
            }
        }

        for (let i = 0; i < arr.length; i++) {
            let newPrefix = prefix + arr[i];
            let remaining = arr.slice(0, i).concat(arr.slice(i + 1));
            getPermutations(remaining, newPrefix);
        }
    }

    function isPrime(num) {
        if (num < 2) return false;
        for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {
            if (num % i === 0) return false;
        }
        return true;
    }

    getPermutations(digitArr, '');

    return primeSet.size;
}

function solution(arr) {
    const n = arr.length;

    // Function to check if all values in the subarray are the same
    function isUniform(x, y, size) {
        const firstValue = arr[x][y];
        for (let i = x; i < x + size; i++) {
            for (let j = y; j < y + size; j++) {
                if (arr[i][j] !== firstValue) {
                    return false;
                }
            }
        }
        return true;
    }

    // Function to count 0s and 1s in the subarray
    function countValues(x, y, size) {
        if (isUniform(x, y, size)) {
            return arr[x][y] === 0 ? [1, 0] : [0, 1];
        }

        const newSize = size / 2;
        const topLeft = countValues(x, y, newSize);
        const topRight = countValues(x, y + newSize, newSize);
        const bottomLeft = countValues(x + newSize, y, newSize);
        const bottomRight = countValues(x + newSize, y + newSize, newSize);

        return [
            topLeft[0] + topRight[0] + bottomLeft[0] + bottomRight[0],
            topLeft[1] + topRight[1] + bottomLeft[1] + bottomRight[1]
        ];
    }

    const result = countValues(0, 0, n);
    return result;
}
