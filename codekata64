function solution(numbers) {
    // Convert each number to a string for comparison
    let numStrs = numbers.map(String);

    // Sort the numbers based on the custom comparator
    numStrs.sort((a, b) => (b + a).localeCompare(a + b));

    // If the highest number is '0', return '0' to avoid leading zeroes
    if (numStrs[0] === '0') {
        return '0';
    }

    // Join the sorted strings to form the largest number
    return numStrs.join('');
}

function solution(numbers) {
    let digitArr = numbers.split('');
    let primeSet = new Set();

    function getPermutations(arr, prefix) {
        if (prefix.length > 0) {
            let num = parseInt(prefix);
            if (isPrime(num)) {
                primeSet.add(num);
            }
        }

        for (let i = 0; i < arr.length; i++) {
            let newPrefix = prefix + arr[i];
            let remaining = arr.slice(0, i).concat(arr.slice(i + 1));
            getPermutations(remaining, newPrefix);
        }
    }

    function isPrime(num) {
        if (num < 2) return false;
        for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {
            if (num % i === 0) return false;
        }
        return true;
    }

    getPermutations(digitArr, '');

    return primeSet.size;
}
